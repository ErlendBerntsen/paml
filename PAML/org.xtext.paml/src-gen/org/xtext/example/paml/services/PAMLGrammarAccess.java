/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.paml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PAMLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PAMLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.paml.PAML.PAML");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPamlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetaInformationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetaInformationMetaParserRuleCall_1_0 = (RuleCall)cMetaInformationAssignment_1.eContents().get(0);
		private final Assignment cPrecodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrecodeCODETerminalRuleCall_2_0 = (RuleCall)cPrecodeAssignment_2.eContents().get(0);
		private final Assignment cTasksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTasksTaskParserRuleCall_3_0 = (RuleCall)cTasksAssignment_3.eContents().get(0);
		private final Assignment cPostcodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPostcodeCODETerminalRuleCall_4_0 = (RuleCall)cPostcodeAssignment_4.eContents().get(0);
		private final Keyword cPamlKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PAML:
		//    '<paml>'
		//    (metaInformation=Meta)
		//    (precode=CODE)?
		//    (tasks=Task)+
		//    (postcode=CODE)?
		//    '</paml>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<paml>'
		//(metaInformation=Meta)
		//(precode=CODE)?
		//(tasks=Task)+
		//(postcode=CODE)?
		//'</paml>'
		public Group getGroup() { return cGroup; }
		
		//'<paml>'
		public Keyword getPamlKeyword_0() { return cPamlKeyword_0; }
		
		//(metaInformation=Meta)
		public Assignment getMetaInformationAssignment_1() { return cMetaInformationAssignment_1; }
		
		//Meta
		public RuleCall getMetaInformationMetaParserRuleCall_1_0() { return cMetaInformationMetaParserRuleCall_1_0; }
		
		//(precode=CODE)?
		public Assignment getPrecodeAssignment_2() { return cPrecodeAssignment_2; }
		
		//CODE
		public RuleCall getPrecodeCODETerminalRuleCall_2_0() { return cPrecodeCODETerminalRuleCall_2_0; }
		
		//(tasks=Task)+
		public Assignment getTasksAssignment_3() { return cTasksAssignment_3; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_3_0() { return cTasksTaskParserRuleCall_3_0; }
		
		//(postcode=CODE)?
		public Assignment getPostcodeAssignment_4() { return cPostcodeAssignment_4; }
		
		//CODE
		public RuleCall getPostcodeCODETerminalRuleCall_4_0() { return cPostcodeCODETerminalRuleCall_4_0; }
		
		//'</paml>'
		public Keyword getPamlKeyword_5() { return cPamlKeyword_5; }
	}
	public class MetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.paml.PAML.Meta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLangKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cListStyleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cListStyleAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cListStyleListStyleEnumRuleCall_2_2_0 = (RuleCall)cListStyleAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cListRotationKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cListRotationAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cListRotationListRotationEnumRuleCall_3_2_0 = (RuleCall)cListRotationAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStartCommentKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cStringAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cStringAssignment_4_2.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Meta:
		//    '<meta'
		//    ('lang' '=' name=ID)?
		//    ('listStyle' '=' listStyle=ListStyle)
		//    ('listRotation' '=' listRotation=ListRotation)
		//    ('startComment' '=' string=STRING)
		//    '/>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<meta'
		//('lang' '=' name=ID)?
		//('listStyle' '=' listStyle=ListStyle)
		//('listRotation' '=' listRotation=ListRotation)
		//('startComment' '=' string=STRING)
		//'/>'
		public Group getGroup() { return cGroup; }
		
		//'<meta'
		public Keyword getMetaKeyword_0() { return cMetaKeyword_0; }
		
		//('lang' '=' name=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'lang'
		public Keyword getLangKeyword_1_0() { return cLangKeyword_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
		
		//('listStyle' '=' listStyle=ListStyle)
		public Group getGroup_2() { return cGroup_2; }
		
		//'listStyle'
		public Keyword getListStyleKeyword_2_0() { return cListStyleKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//listStyle=ListStyle
		public Assignment getListStyleAssignment_2_2() { return cListStyleAssignment_2_2; }
		
		//ListStyle
		public RuleCall getListStyleListStyleEnumRuleCall_2_2_0() { return cListStyleListStyleEnumRuleCall_2_2_0; }
		
		//('listRotation' '=' listRotation=ListRotation)
		public Group getGroup_3() { return cGroup_3; }
		
		//'listRotation'
		public Keyword getListRotationKeyword_3_0() { return cListRotationKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//listRotation=ListRotation
		public Assignment getListRotationAssignment_3_2() { return cListRotationAssignment_3_2; }
		
		//ListRotation
		public RuleCall getListRotationListRotationEnumRuleCall_3_2_0() { return cListRotationListRotationEnumRuleCall_3_2_0; }
		
		//('startComment' '=' string=STRING)
		public Group getGroup_4() { return cGroup_4; }
		
		//'startComment'
		public Keyword getStartCommentKeyword_4_0() { return cStartCommentKeyword_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//string=STRING
		public Assignment getStringAssignment_4_2() { return cStringAssignment_4_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_2_0() { return cStringSTRINGTerminalRuleCall_4_2_0; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_5() { return cSolidusGreaterThanSignKeyword_5; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.paml.PAML.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTitleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStringAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cStringAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStringAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cStringAssignment_2_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCodeCODETerminalRuleCall_4_0 = (RuleCall)cCodeAssignment_4.eContents().get(0);
		private final Assignment cTestAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTestTESTTerminalRuleCall_5_0 = (RuleCall)cTestAssignment_5.eContents().get(0);
		private final Assignment cSubtasksAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSubtasksTaskParserRuleCall_6_0 = (RuleCall)cSubtasksAssignment_6.eContents().get(0);
		private final Keyword cTaskKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Task:
		//    '<task' ('title' '=' string=STRING)? ('description' '=' string=STRING) '>'
		//    (code=CODE)?
		//    (test=TEST)?
		//    (subtasks=Task)*
		//    '</task>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<task' ('title' '=' string=STRING)? ('description' '=' string=STRING) '>'
		//(code=CODE)?
		//(test=TEST)?
		//(subtasks=Task)*
		//'</task>'
		public Group getGroup() { return cGroup; }
		
		//'<task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//('title' '=' string=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'title'
		public Keyword getTitleKeyword_1_0() { return cTitleKeyword_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//string=STRING
		public Assignment getStringAssignment_1_2() { return cStringAssignment_1_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_2_0() { return cStringSTRINGTerminalRuleCall_1_2_0; }
		
		//('description' '=' string=STRING)
		public Group getGroup_2() { return cGroup_2; }
		
		//'description'
		public Keyword getDescriptionKeyword_2_0() { return cDescriptionKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//string=STRING
		public Assignment getStringAssignment_2_2() { return cStringAssignment_2_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_2_0() { return cStringSTRINGTerminalRuleCall_2_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//(code=CODE)?
		public Assignment getCodeAssignment_4() { return cCodeAssignment_4; }
		
		//CODE
		public RuleCall getCodeCODETerminalRuleCall_4_0() { return cCodeCODETerminalRuleCall_4_0; }
		
		//(test=TEST)?
		public Assignment getTestAssignment_5() { return cTestAssignment_5; }
		
		//TEST
		public RuleCall getTestTESTTerminalRuleCall_5_0() { return cTestTESTTerminalRuleCall_5_0; }
		
		//(subtasks=Task)*
		public Assignment getSubtasksAssignment_6() { return cSubtasksAssignment_6; }
		
		//Task
		public RuleCall getSubtasksTaskParserRuleCall_6_0() { return cSubtasksTaskParserRuleCall_6_0; }
		
		//'</task>'
		public Keyword getTaskKeyword_7() { return cTaskKeyword_7; }
	}
	
	public class ListStyleElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.paml.PAML.ListStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNUMBERSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNUMBERSNumbersKeyword_0_0 = (Keyword)cNUMBERSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLETTERSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLETTERSLettersKeyword_1_0 = (Keyword)cLETTERSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cROMANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cROMANRomanKeyword_2_0 = (Keyword)cROMANEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ListStyle: NUMBERS='numbers' | LETTERS='letters' | ROMAN='roman';
		public EnumRule getRule() { return rule; }
		
		//NUMBERS='numbers' | LETTERS='letters' | ROMAN='roman'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NUMBERS='numbers'
		public EnumLiteralDeclaration getNUMBERSEnumLiteralDeclaration_0() { return cNUMBERSEnumLiteralDeclaration_0; }
		
		//'numbers'
		public Keyword getNUMBERSNumbersKeyword_0_0() { return cNUMBERSNumbersKeyword_0_0; }
		
		//LETTERS='letters'
		public EnumLiteralDeclaration getLETTERSEnumLiteralDeclaration_1() { return cLETTERSEnumLiteralDeclaration_1; }
		
		//'letters'
		public Keyword getLETTERSLettersKeyword_1_0() { return cLETTERSLettersKeyword_1_0; }
		
		//ROMAN='roman'
		public EnumLiteralDeclaration getROMANEnumLiteralDeclaration_2() { return cROMANEnumLiteralDeclaration_2; }
		
		//'roman'
		public Keyword getROMANRomanKeyword_2_0() { return cROMANRomanKeyword_2_0; }
	}
	public class ListRotationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.paml.PAML.ListRotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALTERNATINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALTERNATINGAlternatingKeyword_0_0 = (Keyword)cALTERNATINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSAMEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSAMESameKeyword_1_0 = (Keyword)cSAMEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ListRotation: ALTERNATING='alternating' | SAME='same';
		public EnumRule getRule() { return rule; }
		
		//ALTERNATING='alternating' | SAME='same'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALTERNATING='alternating'
		public EnumLiteralDeclaration getALTERNATINGEnumLiteralDeclaration_0() { return cALTERNATINGEnumLiteralDeclaration_0; }
		
		//'alternating'
		public Keyword getALTERNATINGAlternatingKeyword_0_0() { return cALTERNATINGAlternatingKeyword_0_0; }
		
		//SAME='same'
		public EnumLiteralDeclaration getSAMEEnumLiteralDeclaration_1() { return cSAMEEnumLiteralDeclaration_1; }
		
		//'same'
		public Keyword getSAMESameKeyword_1_0() { return cSAMESameKeyword_1_0; }
	}
	
	private final PAMLElements pPAML;
	private final MetaElements pMeta;
	private final ListStyleElements eListStyle;
	private final ListRotationElements eListRotation;
	private final TerminalRule tCODE;
	private final TaskElements pTask;
	private final TerminalRule tTEST;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PAMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPAML = new PAMLElements();
		this.pMeta = new MetaElements();
		this.eListStyle = new ListStyleElements();
		this.eListRotation = new ListRotationElements();
		this.tCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.paml.PAML.CODE");
		this.pTask = new TaskElements();
		this.tTEST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.paml.PAML.TEST");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.paml.PAML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PAML:
	//    '<paml>'
	//    (metaInformation=Meta)
	//    (precode=CODE)?
	//    (tasks=Task)+
	//    (postcode=CODE)?
	//    '</paml>';
	public PAMLElements getPAMLAccess() {
		return pPAML;
	}
	
	public ParserRule getPAMLRule() {
		return getPAMLAccess().getRule();
	}
	
	//Meta:
	//    '<meta'
	//    ('lang' '=' name=ID)?
	//    ('listStyle' '=' listStyle=ListStyle)
	//    ('listRotation' '=' listRotation=ListRotation)
	//    ('startComment' '=' string=STRING)
	//    '/>';
	public MetaElements getMetaAccess() {
		return pMeta;
	}
	
	public ParserRule getMetaRule() {
		return getMetaAccess().getRule();
	}
	
	//enum ListStyle: NUMBERS='numbers' | LETTERS='letters' | ROMAN='roman';
	public ListStyleElements getListStyleAccess() {
		return eListStyle;
	}
	
	public EnumRule getListStyleRule() {
		return getListStyleAccess().getRule();
	}
	
	//enum ListRotation: ALTERNATING='alternating' | SAME='same';
	public ListRotationElements getListRotationAccess() {
		return eListRotation;
	}
	
	public EnumRule getListRotationRule() {
		return getListRotationAccess().getRule();
	}
	
	//terminal CODE:
	//    '<code>' -> '</code>';
	public TerminalRule getCODERule() {
		return tCODE;
	}
	
	//Task:
	//    '<task' ('title' '=' string=STRING)? ('description' '=' string=STRING) '>'
	//    (code=CODE)?
	//    (test=TEST)?
	//    (subtasks=Task)*
	//    '</task>';
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//terminal TEST:
	//    '<test>' -> '</test>';
	public TerminalRule getTESTRule() {
		return tTEST;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
