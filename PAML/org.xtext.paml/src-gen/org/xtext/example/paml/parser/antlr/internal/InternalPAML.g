/*
 * generated by Xtext 2.26.0
 */
grammar InternalPAML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.paml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.paml.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.paml.services.PAMLGrammarAccess;

}

@parser::members {

 	private PAMLGrammarAccess grammarAccess;

    public InternalPAMLParser(TokenStream input, PAMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "PAML";
   	}

   	@Override
   	protected PAMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePAML
entryRulePAML returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPAMLRule()); }
	iv_rulePAML=rulePAML
	{ $current=$iv_rulePAML.current; }
	EOF;

// Rule PAML
rulePAML returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<paml>'
		{
			newLeafNode(otherlv_0, grammarAccess.getPAMLAccess().getPamlKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPAMLAccess().getMetaInformationMetaParserRuleCall_1_0());
				}
				lv_metaInformation_1_0=ruleMeta
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPAMLRule());
					}
					set(
						$current,
						"metaInformation",
						lv_metaInformation_1_0,
						"org.xtext.example.paml.PAML.Meta");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_precode_2_0=RULE_CODE
				{
					newLeafNode(lv_precode_2_0, grammarAccess.getPAMLAccess().getPrecodeCODETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPAMLRule());
					}
					setWithLastConsumed(
						$current,
						"precode",
						lv_precode_2_0,
						"org.xtext.example.paml.PAML.CODE");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPAMLAccess().getTasksTaskParserRuleCall_3_0());
				}
				lv_tasks_3_0=ruleTask
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPAMLRule());
					}
					set(
						$current,
						"tasks",
						lv_tasks_3_0,
						"org.xtext.example.paml.PAML.Task");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				lv_postcode_4_0=RULE_CODE
				{
					newLeafNode(lv_postcode_4_0, grammarAccess.getPAMLAccess().getPostcodeCODETerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPAMLRule());
					}
					setWithLastConsumed(
						$current,
						"postcode",
						lv_postcode_4_0,
						"org.xtext.example.paml.PAML.CODE");
				}
			)
		)?
		otherlv_5='</paml>'
		{
			newLeafNode(otherlv_5, grammarAccess.getPAMLAccess().getPamlKeyword_5());
		}
	)
;

// Entry rule entryRuleMeta
entryRuleMeta returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMetaRule()); }
	iv_ruleMeta=ruleMeta
	{ $current=$iv_ruleMeta.current; }
	EOF;

// Rule Meta
ruleMeta returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<meta'
		{
			newLeafNode(otherlv_0, grammarAccess.getMetaAccess().getMetaKeyword_0());
		}
		(
			otherlv_1='lang'
			{
				newLeafNode(otherlv_1, grammarAccess.getMetaAccess().getLangKeyword_1_0());
			}
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getMetaAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					lv_name_3_0=RULE_ID
					{
						newLeafNode(lv_name_3_0, grammarAccess.getMetaAccess().getNameIDTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMetaRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
		(
			otherlv_4='listStyle'
			{
				newLeafNode(otherlv_4, grammarAccess.getMetaAccess().getListStyleKeyword_2_0());
			}
			otherlv_5='='
			{
				newLeafNode(otherlv_5, grammarAccess.getMetaAccess().getEqualsSignKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMetaAccess().getListStyleListStyleEnumRuleCall_2_2_0());
					}
					lv_listStyle_6_0=ruleListStyle
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMetaRule());
						}
						set(
							$current,
							"listStyle",
							lv_listStyle_6_0,
							"org.xtext.example.paml.PAML.ListStyle");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_7='listRotation'
			{
				newLeafNode(otherlv_7, grammarAccess.getMetaAccess().getListRotationKeyword_3_0());
			}
			otherlv_8='='
			{
				newLeafNode(otherlv_8, grammarAccess.getMetaAccess().getEqualsSignKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMetaAccess().getListRotationListRotationEnumRuleCall_3_2_0());
					}
					lv_listRotation_9_0=ruleListRotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMetaRule());
						}
						set(
							$current,
							"listRotation",
							lv_listRotation_9_0,
							"org.xtext.example.paml.PAML.ListRotation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_10='startComment'
			{
				newLeafNode(otherlv_10, grammarAccess.getMetaAccess().getStartCommentKeyword_4_0());
			}
			otherlv_11='='
			{
				newLeafNode(otherlv_11, grammarAccess.getMetaAccess().getEqualsSignKeyword_4_1());
			}
			(
				(
					lv_string_12_0=RULE_STRING
					{
						newLeafNode(lv_string_12_0, grammarAccess.getMetaAccess().getStringSTRINGTerminalRuleCall_4_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMetaRule());
						}
						setWithLastConsumed(
							$current,
							"string",
							lv_string_12_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		otherlv_13='/>'
		{
			newLeafNode(otherlv_13, grammarAccess.getMetaAccess().getSolidusGreaterThanSignKeyword_5());
		}
	)
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<task'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getTaskKeyword_0());
		}
		(
			otherlv_1='title'
			{
				newLeafNode(otherlv_1, grammarAccess.getTaskAccess().getTitleKeyword_1_0());
			}
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getTaskAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					lv_string_3_0=RULE_STRING
					{
						newLeafNode(lv_string_3_0, grammarAccess.getTaskAccess().getStringSTRINGTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTaskRule());
						}
						setWithLastConsumed(
							$current,
							"string",
							lv_string_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		(
			otherlv_4='description'
			{
				newLeafNode(otherlv_4, grammarAccess.getTaskAccess().getDescriptionKeyword_2_0());
			}
			otherlv_5='='
			{
				newLeafNode(otherlv_5, grammarAccess.getTaskAccess().getEqualsSignKeyword_2_1());
			}
			(
				(
					lv_string_6_0=RULE_STRING
					{
						newLeafNode(lv_string_6_0, grammarAccess.getTaskAccess().getStringSTRINGTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTaskRule());
						}
						setWithLastConsumed(
							$current,
							"string",
							lv_string_6_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		otherlv_7='>'
		{
			newLeafNode(otherlv_7, grammarAccess.getTaskAccess().getGreaterThanSignKeyword_3());
		}
		(
			(
				lv_code_8_0=RULE_CODE
				{
					newLeafNode(lv_code_8_0, grammarAccess.getTaskAccess().getCodeCODETerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"code",
						lv_code_8_0,
						"org.xtext.example.paml.PAML.CODE");
				}
			)
		)?
		(
			(
				lv_test_9_0=RULE_TEST
				{
					newLeafNode(lv_test_9_0, grammarAccess.getTaskAccess().getTestTESTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"test",
						lv_test_9_0,
						"org.xtext.example.paml.PAML.TEST");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getSubtasksTaskParserRuleCall_6_0());
				}
				lv_subtasks_10_0=ruleTask
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"subtasks",
						lv_subtasks_10_0,
						"org.xtext.example.paml.PAML.Task");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_11='</task>'
		{
			newLeafNode(otherlv_11, grammarAccess.getTaskAccess().getTaskKeyword_7());
		}
	)
;

// Rule ListStyle
ruleListStyle returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='numbers'
			{
				$current = grammarAccess.getListStyleAccess().getNUMBERSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getListStyleAccess().getNUMBERSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='letters'
			{
				$current = grammarAccess.getListStyleAccess().getLETTERSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getListStyleAccess().getLETTERSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='roman'
			{
				$current = grammarAccess.getListStyleAccess().getROMANEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getListStyleAccess().getROMANEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ListRotation
ruleListRotation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='alternating'
			{
				$current = grammarAccess.getListRotationAccess().getALTERNATINGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getListRotationAccess().getALTERNATINGEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='same'
			{
				$current = grammarAccess.getListRotationAccess().getSAMEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getListRotationAccess().getSAMEEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_CODE : '<code>' ( options {greedy=false;} : . )*'</code>';

RULE_TEST : '<test>' ( options {greedy=false;} : . )*'</test>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
