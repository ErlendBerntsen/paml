/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.paml.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.paml.pAML.Meta;
import org.xtext.example.paml.pAML.PAML;
import org.xtext.example.paml.pAML.PAMLPackage;
import org.xtext.example.paml.pAML.Task;
import org.xtext.example.paml.services.PAMLGrammarAccess;

@SuppressWarnings("all")
public class PAMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PAMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PAMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PAMLPackage.META:
				sequence_Meta(context, (Meta) semanticObject); 
				return; 
			case PAMLPackage.PAML:
				sequence_PAML(context, (PAML) semanticObject); 
				return; 
			case PAMLPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Meta returns Meta
	 *
	 * Constraint:
	 *     (name=ID? listStyle=ListStyle listRotation=ListRotation string=STRING)
	 * </pre>
	 */
	protected void sequence_Meta(ISerializationContext context, Meta semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PAML returns PAML
	 *
	 * Constraint:
	 *     (metaInformation=Meta precode=CODE? tasks=Task+ postcode=CODE?)
	 * </pre>
	 */
	protected void sequence_PAML(ISerializationContext context, PAML semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (string=STRING? string=STRING code=CODE? test=TEST? subtasks=Task*)
	 * </pre>
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
