/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.paml.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.paml.ide.contentassist.antlr.internal.InternalPAMLParser;
import org.xtext.example.paml.services.PAMLGrammarAccess;

public class PAMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PAMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PAMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getListStyleAccess().getAlternatives(), "rule__ListStyle__Alternatives");
			builder.put(grammarAccess.getListRotationAccess().getAlternatives(), "rule__ListRotation__Alternatives");
			builder.put(grammarAccess.getPAMLAccess().getGroup(), "rule__PAML__Group__0");
			builder.put(grammarAccess.getMetaAccess().getGroup(), "rule__Meta__Group__0");
			builder.put(grammarAccess.getMetaAccess().getGroup_1(), "rule__Meta__Group_1__0");
			builder.put(grammarAccess.getMetaAccess().getGroup_2(), "rule__Meta__Group_2__0");
			builder.put(grammarAccess.getMetaAccess().getGroup_3(), "rule__Meta__Group_3__0");
			builder.put(grammarAccess.getMetaAccess().getGroup_4(), "rule__Meta__Group_4__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_1(), "rule__Task__Group_1__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_2(), "rule__Task__Group_2__0");
			builder.put(grammarAccess.getPAMLAccess().getMetaInformationAssignment_1(), "rule__PAML__MetaInformationAssignment_1");
			builder.put(grammarAccess.getPAMLAccess().getPrecodeAssignment_2(), "rule__PAML__PrecodeAssignment_2");
			builder.put(grammarAccess.getPAMLAccess().getTasksAssignment_3(), "rule__PAML__TasksAssignment_3");
			builder.put(grammarAccess.getPAMLAccess().getPostcodeAssignment_4(), "rule__PAML__PostcodeAssignment_4");
			builder.put(grammarAccess.getMetaAccess().getNameAssignment_1_2(), "rule__Meta__NameAssignment_1_2");
			builder.put(grammarAccess.getMetaAccess().getListStyleAssignment_2_2(), "rule__Meta__ListStyleAssignment_2_2");
			builder.put(grammarAccess.getMetaAccess().getListRotationAssignment_3_2(), "rule__Meta__ListRotationAssignment_3_2");
			builder.put(grammarAccess.getMetaAccess().getStringAssignment_4_2(), "rule__Meta__StringAssignment_4_2");
			builder.put(grammarAccess.getTaskAccess().getStringAssignment_1_2(), "rule__Task__StringAssignment_1_2");
			builder.put(grammarAccess.getTaskAccess().getStringAssignment_2_2(), "rule__Task__StringAssignment_2_2");
			builder.put(grammarAccess.getTaskAccess().getCodeAssignment_4(), "rule__Task__CodeAssignment_4");
			builder.put(grammarAccess.getTaskAccess().getTestAssignment_5(), "rule__Task__TestAssignment_5");
			builder.put(grammarAccess.getTaskAccess().getSubtasksAssignment_6(), "rule__Task__SubtasksAssignment_6");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PAMLGrammarAccess grammarAccess;

	@Override
	protected InternalPAMLParser createParser() {
		InternalPAMLParser result = new InternalPAMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PAMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PAMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
